{
  "address": "0x95781Ec2220B6631111a140C5483868d3aA01cFb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Lock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "burnTxnHash",
          "type": "string"
        }
      ],
      "name": "Release",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "SetSigner",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "approvedSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "burnTxnHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domain",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lockTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "burnTxnHash",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "releaseTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7033e4895feb3479b147f42c03af074d31f7242fe928e1704b62f2471bd8bac6",
  "receipt": {
    "to": null,
    "from": "0x188E2e21503540CfFBD4F8e94B8E338Cd9433A1A",
    "contractAddress": "0x95781Ec2220B6631111a140C5483868d3aA01cFb",
    "transactionIndex": 4,
    "gasUsed": "2049169",
    "logsBloom": "0x
    "blockHash": "0x93b7ccf1ca2050c2c65ad6dd8a9dd721d72e0e117f168ed38499918a5cf90632",
    "transactionHash": "0x7033e4895feb3479b147f42c03af074d31f7242fe928e1704b62f2471bd8bac6",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 23840844,
        "transactionHash": "0x7033e4895feb3479b147f42c03af074d31f7242fe928e1704b62f2471bd8bac6",
        "address": "0x95781Ec2220B6631111a140C5483868d3aA01cFb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000188e2e21503540cffbd4f8e94b8e338cd9433a1a"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x93b7ccf1ca2050c2c65ad6dd8a9dd721d72e0e117f168ed38499918a5cf90632"
      }
    ],
    "blockNumber": 23840844,
    "cumulativeGasUsed": "2362452",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0A19344446817Fa1e6E03e87ea8A7AeC1dAB3e96",
    "0x188E2e21503540CfFBD4F8e94B8E338Cd9433A1A"
  ],
  "numDeployments": 1,
  "solcInputHash": "354552fe2ab2cb43af23bbb3a8927d4c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"burnTxnHash\",\"type\":\"string\"}],\"name\":\"Release\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"SetSigner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"approvedSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"burnTxnHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"burnTxnHash\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"releaseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/BSCLock.sol\":\"BSCLock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0xc8add71d80d05a1390e1c656686a0ea10ffaebfcc433cc397a63fd725f376b7e\",\"license\":\"MIT\"},\"contracts/bridge/BSCLock.sol\":{\"content\":\"pragma solidity 0.8.2;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./Signer.sol\\\";\\n\\ncontract BSCLock is ReentrancyGuard, Signer {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable token;\\n\\n    event Lock(address indexed user, uint256 amount);\\n    event Release(\\n        address indexed user,\\n        uint256 amount,\\n        string indexed burnTxnHash\\n    );\\n\\n    mapping (string => bool) public burnTxnHashes;\\n\\n    constructor(\\n        IERC20 _token,\\n        address _signer\\n    ) Signer(\\\"BSC\\\", \\\"1.0\\\", _signer)\\n    {\\n        token = _token;\\n    }\\n\\n    function lockTokens(uint256 amount) external nonReentrant {\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Lock(msg.sender, amount);\\n    }\\n\\n    function releaseTokens(\\n        address user,\\n        uint256 amount,\\n        string memory burnTxnHash,\\n        bytes memory signature\\n    )\\n    external\\n    nonReentrant\\n    onlyWithSignature(user, amount, burnTxnHash, signature)\\n    {\\n        require(\\n            burnTxnHashes[burnTxnHash] == false,\\n            \\\"Burn txn hash, already exist\\\"\\n        );\\n\\n        burnTxnHashes[burnTxnHash] = true;\\n        token.safeTransfer(user, amount);\\n        emit Release(user, amount, burnTxnHash);\\n    }\\n\\n\\n}\",\"keccak256\":\"0x77c8e9399802b0e0c4cd91eb67d7bcfb34557431fe43a25e3958e6a99a38e78b\"},\"contracts/bridge/Signer.sol\":{\"content\":\"pragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\ncontract Signer is Ownable {\\n    address public approvedSigner;\\n\\n    string public domain;\\n    string public version;\\n\\n    event SetSigner(address indexed signer);\\n\\n    struct Verification {\\n        address user;\\n        uint256 amount;\\n        string txHash;\\n        string domain;\\n        string version;\\n    }\\n\\n    constructor(\\n        string memory _domain,\\n        string memory _version,\\n        address _signer\\n    ) {\\n        domain = _domain;\\n        version = _version;\\n        approvedSigner = _signer;\\n    }\\n\\n    function setSigner(address _signer) public onlyOwner {\\n        approvedSigner = _signer;\\n        emit SetSigner(_signer);\\n    }\\n\\n    modifier onlyWithSignature(\\n        address user,\\n        uint256 amount,\\n        string memory txHash,\\n        bytes memory signature\\n    ) {\\n        bytes32 verificationHash = keccak256(\\n            abi.encode(Verification(user, amount, txHash, domain, version))\\n        );\\n\\n        require(\\n            SignatureChecker.isValidSignatureNow(\\n                approvedSigner,\\n                ECDSA.toEthSignedMessageHash(verificationHash),\\n                signature\\n            ) == true,\\n            \\\"Invalid signature\\\"\\n        );\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x6eaac7e021f6f98a9a49423c00829e0ad6f4038460302094a0b82e26d1d465a2\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620026813803806200268183398181016040528101906200003791906200032d565b6040518060400160405280600381526020017f42534300000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f312e300000000000000000000000000000000000000000000000000000000000815250826001600081905550620000cc620000c06200018160201b60201c565b6200018960201b60201c565b8260039080519060200190620000e49291906200024f565b508160049080519060200190620000fd9291906200024f565b5080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050506200044f565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200025d90620003b6565b90600052602060002090601f016020900481019282620002815760008555620002cd565b82601f106200029c57805160ff1916838001178555620002cd565b82800160010185558215620002cd579182015b82811115620002cc578251825591602001919060010190620002af565b5b509050620002dc9190620002e0565b5090565b5b80821115620002fb576000816000905550600101620002e1565b5090565b60008151905062000310816200041b565b92915050565b600081519050620003278162000435565b92915050565b600080604083850312156200034157600080fd5b6000620003518582860162000316565b92505060206200036485828601620002ff565b9150509250929050565b60006200037b8262000396565b9050919050565b60006200038f826200036e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006002820490506001821680620003cf57607f821691505b60208210811415620003e657620003e5620003ec565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b62000426816200036e565b81146200043257600080fd5b50565b620004408162000382565b81146200044c57600080fd5b50565b60805160601c6122056200047c600039600081816105aa015281816107be0152610abc01526122056000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a6146101505780638da5cb5b1461015a578063c2fb26a614610178578063d082fe1714610196578063f2fde38b146101b4578063fc0c546a146101d0576100a9565b80633b3d8297146100ae57806354fd4d50146100de5780635ba3c270146100fc5780636c19e783146101185780636e27d88914610134575b600080fd5b6100c860048036038101906100c391906115ba565b6101ee565b6040516100d59190611a4e565b60405180910390f35b6100e6610224565b6040516100f39190611af9565b60405180910390f35b610116600480360381019061011191906114d5565b6102b2565b005b610132600480360381019061012d91906114ac565b610665565b005b61014e600480360381019061014991906115fb565b610768565b005b61015861085c565b005b6101626108e4565b60405161016f91906119d3565b60405180910390f35b61018061090e565b60405161018d9190611af9565b60405180910390f35b61019e61099c565b6040516101ab91906119d3565b60405180910390f35b6101ce60048036038101906101c991906114ac565b6109c2565b005b6101d8610aba565b6040516101e59190611ade565b60405180910390f35b6005818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6004805461023190611e85565b80601f016020809104026020016040519081016040528092919081815260200182805461025d90611e85565b80156102aa5780601f1061027f576101008083540402835291602001916102aa565b820191906000526020600020905b81548152906001019060200180831161028d57829003601f168201915b505050505081565b600260005414156102f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ef90611bfb565b60405180910390fd5b60026000819055508383838360006040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020016003805461034690611e85565b80601f016020809104026020016040519081016040528092919081815260200182805461037290611e85565b80156103bf5780601f10610394576101008083540402835291602001916103bf565b820191906000526020600020905b8154815290600101906020018083116103a257829003601f168201915b50505050508152602001600480546103d690611e85565b80601f016020809104026020016040519081016040528092919081815260200182805461040290611e85565b801561044f5780601f106104245761010080835404028352916020019161044f565b820191906000526020600020905b81548152906001019060200180831161043257829003601f168201915b50505050508152506040516020016104679190611c1b565b604051602081830303815290604052805190602001209050600115156104b8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166104b284610ade565b85610b0e565b1515146104fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f190611b5b565b60405180910390fd5b6000151560058860405161050e9190611996565b908152602001604051809103902060009054906101000a900460ff1615151461056c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056390611b1b565b60405180910390fd5b600160058860405161057e9190611996565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506105ee89897f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610d3f9092919063ffffffff16565b866040516105fc9190611996565b60405180910390208973ffffffffffffffffffffffffffffffffffffffff167fc1bbd3f894b00b67a83ffe6a4f03d5b4a6385cf720e99eede61ff86788e42c1d8a60405161064a9190611c3d565b60405180910390a35050505050600160008190555050505050565b61066d610dc5565b73ffffffffffffffffffffffffffffffffffffffff1661068b6108e4565b73ffffffffffffffffffffffffffffffffffffffff16146106e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d890611b9b565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fbb10aee7ef5a307b8097c6a7f2892b909ff1736fd24a6a5260640c185f7153b660405160405180910390a250565b600260005414156107ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a590611bfb565b60405180910390fd5b60026000819055506108033330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610dcd909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f625fed9875dada8643f2418b838ae0bc78d9a148a18eee4ee1979ff0f3f5d427826040516108499190611c3d565b60405180910390a2600160008190555050565b610864610dc5565b73ffffffffffffffffffffffffffffffffffffffff166108826108e4565b73ffffffffffffffffffffffffffffffffffffffff16146108d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cf90611b9b565b60405180910390fd5b6108e26000610e56565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6003805461091b90611e85565b80601f016020809104026020016040519081016040528092919081815260200182805461094790611e85565b80156109945780601f1061096957610100808354040283529160200191610994565b820191906000526020600020905b81548152906001019060200180831161097757829003601f168201915b505050505081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109ca610dc5565b73ffffffffffffffffffffffffffffffffffffffff166109e86108e4565b73ffffffffffffffffffffffffffffffffffffffff1614610a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3590611b9b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610aae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa590611b3b565b60405180910390fd5b610ab781610e56565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081604051602001610af191906119ad565b604051602081830303815290604052805190602001209050919050565b6000806000610b1d8585610f1c565b9150915060006004811115610b5b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610b94577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b148015610bcc57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15610bdc57600192505050610d38565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b8888604051602401610c11929190611a69565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610c7b919061197f565b600060405180830381855afa9150503d8060008114610cb6576040519150601f19603f3d011682016040523d82523d6000602084013e610cbb565b606091505b5091509150818015610cce575060208151145b8015610d315750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681806020019051810190610d109190611591565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9450505050505b9392505050565b610dc08363a9059cbb60e01b8484604051602401610d5e929190611a25565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610f9f565b505050565b600033905090565b610e50846323b872dd60e01b858585604051602401610dee939291906119ee565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610f9f565b50505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080604183511415610f5e5760008060006020860151925060408601519150606086015160001a9050610f5287828585611066565b94509450505050610f98565b604083511415610f8f576000806020850151915060408501519050610f84868383611173565b935093505050610f98565b60006002915091505b9250929050565b6000611001826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166111d29092919063ffffffff16565b905060008151111561106157808060200190518101906110219190611568565b611060576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105790611bdb565b60405180910390fd5b5b505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156110a157600060039150915061116a565b601b8560ff16141580156110b95750601c8560ff1614155b156110cb57600060049150915061116a565b6000600187878787604051600081526020016040526040516110f09493929190611a99565b6020604051602081039080840390855afa158015611112573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111615760006001925092505061116a565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c6111b69190611d3e565b90506111c487828885611066565b935093505050935093915050565b60606111e184846000856111ea565b90509392505050565b60608247101561122f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122690611b7b565b60405180910390fd5b611238856112fe565b611277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126e90611bbb565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516112a0919061197f565b60006040518083038185875af1925050503d80600081146112dd576040519150601f19603f3d011682016040523d82523d6000602084013e6112e2565b606091505b50915091506112f2828286611321565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561133157829050611381565b6000835111156113445782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113789190611af9565b60405180910390fd5b9392505050565b600061139b61139684611c7d565b611c58565b9050828152602081018484840111156113b357600080fd5b6113be848285611e43565b509392505050565b60006113d96113d484611cae565b611c58565b9050828152602081018484840111156113f157600080fd5b6113fc848285611e43565b509392505050565b60008135905061141381612173565b92915050565b6000815190506114288161218a565b92915050565b60008151905061143d816121a1565b92915050565b600082601f83011261145457600080fd5b8135611464848260208601611388565b91505092915050565b600082601f83011261147e57600080fd5b813561148e8482602086016113c6565b91505092915050565b6000813590506114a6816121b8565b92915050565b6000602082840312156114be57600080fd5b60006114cc84828501611404565b91505092915050565b600080600080608085870312156114eb57600080fd5b60006114f987828801611404565b945050602061150a87828801611497565b935050604085013567ffffffffffffffff81111561152757600080fd5b6115338782880161146d565b925050606085013567ffffffffffffffff81111561155057600080fd5b61155c87828801611443565b91505092959194509250565b60006020828403121561157a57600080fd5b600061158884828501611419565b91505092915050565b6000602082840312156115a357600080fd5b60006115b18482850161142e565b91505092915050565b6000602082840312156115cc57600080fd5b600082013567ffffffffffffffff8111156115e657600080fd5b6115f28482850161146d565b91505092915050565b60006020828403121561160d57600080fd5b600061161b84828501611497565b91505092915050565b61162d81611d94565b82525050565b61163c81611d94565b82525050565b61164b81611da6565b82525050565b61165a81611db2565b82525050565b61167161166c82611db2565b611ee8565b82525050565b600061168282611cdf565b61168c8185611cf5565b935061169c818560208601611e52565b6116a581611f7f565b840191505092915050565b60006116bb82611cdf565b6116c58185611d06565b93506116d5818560208601611e52565b80840191505092915050565b6116ea81611e1f565b82525050565b60006116fb82611cea565b6117058185611d11565b9350611715818560208601611e52565b61171e81611f7f565b840191505092915050565b600061173482611cea565b61173e8185611d22565b935061174e818560208601611e52565b61175781611f7f565b840191505092915050565b600061176d82611cea565b6117778185611d33565b9350611787818560208601611e52565b80840191505092915050565b60006117a0601c83611d33565b91506117ab82611f90565b601c82019050919050565b60006117c3601c83611d22565b91506117ce82611fb9565b602082019050919050565b60006117e6602683611d22565b91506117f182611fe2565b604082019050919050565b6000611809601183611d22565b915061181482612031565b602082019050919050565b600061182c602683611d22565b91506118378261205a565b604082019050919050565b600061184f602083611d22565b915061185a826120a9565b602082019050919050565b6000611872601d83611d22565b915061187d826120d2565b602082019050919050565b6000611895602a83611d22565b91506118a0826120fb565b604082019050919050565b60006118b8601f83611d22565b91506118c38261214a565b602082019050919050565b600060a0830160008301516118e66000860182611624565b5060208301516118f96020860182611952565b506040830151848203604086015261191182826116f0565b9150506060830151848203606086015261192b82826116f0565b9150506080830151848203608086015261194582826116f0565b9150508091505092915050565b61195b81611e08565b82525050565b61196a81611e08565b82525050565b61197981611e12565b82525050565b600061198b82846116b0565b915081905092915050565b60006119a28284611762565b915081905092915050565b60006119b882611793565b91506119c48284611660565b60208201915081905092915050565b60006020820190506119e86000830184611633565b92915050565b6000606082019050611a036000830186611633565b611a106020830185611633565b611a1d6040830184611961565b949350505050565b6000604082019050611a3a6000830185611633565b611a476020830184611961565b9392505050565b6000602082019050611a636000830184611642565b92915050565b6000604082019050611a7e6000830185611651565b8181036020830152611a908184611677565b90509392505050565b6000608082019050611aae6000830187611651565b611abb6020830186611970565b611ac86040830185611651565b611ad56060830184611651565b95945050505050565b6000602082019050611af360008301846116e1565b92915050565b60006020820190508181036000830152611b138184611729565b905092915050565b60006020820190508181036000830152611b34816117b6565b9050919050565b60006020820190508181036000830152611b54816117d9565b9050919050565b60006020820190508181036000830152611b74816117fc565b9050919050565b60006020820190508181036000830152611b948161181f565b9050919050565b60006020820190508181036000830152611bb481611842565b9050919050565b60006020820190508181036000830152611bd481611865565b9050919050565b60006020820190508181036000830152611bf481611888565b9050919050565b60006020820190508181036000830152611c14816118ab565b9050919050565b60006020820190508181036000830152611c3581846118ce565b905092915050565b6000602082019050611c526000830184611961565b92915050565b6000611c62611c73565b9050611c6e8282611eb7565b919050565b6000604051905090565b600067ffffffffffffffff821115611c9857611c97611f50565b5b611ca182611f7f565b9050602081019050919050565b600067ffffffffffffffff821115611cc957611cc8611f50565b5b611cd282611f7f565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611d4982611e08565b9150611d5483611e08565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d8957611d88611ef2565b5b828201905092915050565b6000611d9f82611de8565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611e2a82611e31565b9050919050565b6000611e3c82611de8565b9050919050565b82818337600083830152505050565b60005b83811015611e70578082015181840152602081019050611e55565b83811115611e7f576000848401525b50505050565b60006002820490506001821680611e9d57607f821691505b60208210811415611eb157611eb0611f21565b5b50919050565b611ec082611f7f565b810181811067ffffffffffffffff82111715611edf57611ede611f50565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f4275726e2074786e20686173682c20616c726561647920657869737400000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61217c81611d94565b811461218757600080fd5b50565b61219381611da6565b811461219e57600080fd5b50565b6121aa81611dbc565b81146121b557600080fd5b50565b6121c181611e08565b81146121cc57600080fd5b5056fea26469706673582212206d63bc1e13793d8d75b4078a347cf50ae18574a9c2510bd08043fcf55e5ce07864736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063715018a611610071578063715018a6146101505780638da5cb5b1461015a578063c2fb26a614610178578063d082fe1714610196578063f2fde38b146101b4578063fc0c546a146101d0576100a9565b80633b3d8297146100ae57806354fd4d50146100de5780635ba3c270146100fc5780636c19e783146101185780636e27d88914610134575b600080fd5b6100c860048036038101906100c391906115ba565b6101ee565b6040516100d59190611a4e565b60405180910390f35b6100e6610224565b6040516100f39190611af9565b60405180910390f35b610116600480360381019061011191906114d5565b6102b2565b005b610132600480360381019061012d91906114ac565b610665565b005b61014e600480360381019061014991906115fb565b610768565b005b61015861085c565b005b6101626108e4565b60405161016f91906119d3565b60405180910390f35b61018061090e565b60405161018d9190611af9565b60405180910390f35b61019e61099c565b6040516101ab91906119d3565b60405180910390f35b6101ce60048036038101906101c991906114ac565b6109c2565b005b6101d8610aba565b6040516101e59190611ade565b60405180910390f35b6005818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900460ff1681565b6004805461023190611e85565b80601f016020809104026020016040519081016040528092919081815260200182805461025d90611e85565b80156102aa5780601f1061027f576101008083540402835291602001916102aa565b820191906000526020600020905b81548152906001019060200180831161028d57829003601f168201915b505050505081565b600260005414156102f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ef90611bfb565b60405180910390fd5b60026000819055508383838360006040518060a001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020016003805461034690611e85565b80601f016020809104026020016040519081016040528092919081815260200182805461037290611e85565b80156103bf5780601f10610394576101008083540402835291602001916103bf565b820191906000526020600020905b8154815290600101906020018083116103a257829003601f168201915b50505050508152602001600480546103d690611e85565b80601f016020809104026020016040519081016040528092919081815260200182805461040290611e85565b801561044f5780601f106104245761010080835404028352916020019161044f565b820191906000526020600020905b81548152906001019060200180831161043257829003601f168201915b50505050508152506040516020016104679190611c1b565b604051602081830303815290604052805190602001209050600115156104b8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166104b284610ade565b85610b0e565b1515146104fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f190611b5b565b60405180910390fd5b6000151560058860405161050e9190611996565b908152602001604051809103902060009054906101000a900460ff1615151461056c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056390611b1b565b60405180910390fd5b600160058860405161057e9190611996565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506105ee89897f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610d3f9092919063ffffffff16565b866040516105fc9190611996565b60405180910390208973ffffffffffffffffffffffffffffffffffffffff167fc1bbd3f894b00b67a83ffe6a4f03d5b4a6385cf720e99eede61ff86788e42c1d8a60405161064a9190611c3d565b60405180910390a35050505050600160008190555050505050565b61066d610dc5565b73ffffffffffffffffffffffffffffffffffffffff1661068b6108e4565b73ffffffffffffffffffffffffffffffffffffffff16146106e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d890611b9b565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fbb10aee7ef5a307b8097c6a7f2892b909ff1736fd24a6a5260640c185f7153b660405160405180910390a250565b600260005414156107ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a590611bfb565b60405180910390fd5b60026000819055506108033330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610dcd909392919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f625fed9875dada8643f2418b838ae0bc78d9a148a18eee4ee1979ff0f3f5d427826040516108499190611c3d565b60405180910390a2600160008190555050565b610864610dc5565b73ffffffffffffffffffffffffffffffffffffffff166108826108e4565b73ffffffffffffffffffffffffffffffffffffffff16146108d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cf90611b9b565b60405180910390fd5b6108e26000610e56565b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6003805461091b90611e85565b80601f016020809104026020016040519081016040528092919081815260200182805461094790611e85565b80156109945780601f1061096957610100808354040283529160200191610994565b820191906000526020600020905b81548152906001019060200180831161097757829003601f168201915b505050505081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109ca610dc5565b73ffffffffffffffffffffffffffffffffffffffff166109e86108e4565b73ffffffffffffffffffffffffffffffffffffffff1614610a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3590611b9b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610aae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa590611b3b565b60405180910390fd5b610ab781610e56565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081604051602001610af191906119ad565b604051602081830303815290604052805190602001209050919050565b6000806000610b1d8585610f1c565b9150915060006004811115610b5b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115610b94577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b148015610bcc57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15610bdc57600192505050610d38565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b8888604051602401610c11929190611a69565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610c7b919061197f565b600060405180830381855afa9150503d8060008114610cb6576040519150601f19603f3d011682016040523d82523d6000602084013e610cbb565b606091505b5091509150818015610cce575060208151145b8015610d315750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681806020019051810190610d109190611591565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9450505050505b9392505050565b610dc08363a9059cbb60e01b8484604051602401610d5e929190611a25565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610f9f565b505050565b600033905090565b610e50846323b872dd60e01b858585604051602401610dee939291906119ee565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610f9f565b50505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080604183511415610f5e5760008060006020860151925060408601519150606086015160001a9050610f5287828585611066565b94509450505050610f98565b604083511415610f8f576000806020850151915060408501519050610f84868383611173565b935093505050610f98565b60006002915091505b9250929050565b6000611001826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166111d29092919063ffffffff16565b905060008151111561106157808060200190518101906110219190611568565b611060576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105790611bdb565b60405180910390fd5b5b505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156110a157600060039150915061116a565b601b8560ff16141580156110b95750601c8560ff1614155b156110cb57600060049150915061116a565b6000600187878787604051600081526020016040526040516110f09493929190611a99565b6020604051602081039080840390855afa158015611112573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111615760006001925092505061116a565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c6111b69190611d3e565b90506111c487828885611066565b935093505050935093915050565b60606111e184846000856111ea565b90509392505050565b60608247101561122f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122690611b7b565b60405180910390fd5b611238856112fe565b611277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126e90611bbb565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516112a0919061197f565b60006040518083038185875af1925050503d80600081146112dd576040519150601f19603f3d011682016040523d82523d6000602084013e6112e2565b606091505b50915091506112f2828286611321565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561133157829050611381565b6000835111156113445782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113789190611af9565b60405180910390fd5b9392505050565b600061139b61139684611c7d565b611c58565b9050828152602081018484840111156113b357600080fd5b6113be848285611e43565b509392505050565b60006113d96113d484611cae565b611c58565b9050828152602081018484840111156113f157600080fd5b6113fc848285611e43565b509392505050565b60008135905061141381612173565b92915050565b6000815190506114288161218a565b92915050565b60008151905061143d816121a1565b92915050565b600082601f83011261145457600080fd5b8135611464848260208601611388565b91505092915050565b600082601f83011261147e57600080fd5b813561148e8482602086016113c6565b91505092915050565b6000813590506114a6816121b8565b92915050565b6000602082840312156114be57600080fd5b60006114cc84828501611404565b91505092915050565b600080600080608085870312156114eb57600080fd5b60006114f987828801611404565b945050602061150a87828801611497565b935050604085013567ffffffffffffffff81111561152757600080fd5b6115338782880161146d565b925050606085013567ffffffffffffffff81111561155057600080fd5b61155c87828801611443565b91505092959194509250565b60006020828403121561157a57600080fd5b600061158884828501611419565b91505092915050565b6000602082840312156115a357600080fd5b60006115b18482850161142e565b91505092915050565b6000602082840312156115cc57600080fd5b600082013567ffffffffffffffff8111156115e657600080fd5b6115f28482850161146d565b91505092915050565b60006020828403121561160d57600080fd5b600061161b84828501611497565b91505092915050565b61162d81611d94565b82525050565b61163c81611d94565b82525050565b61164b81611da6565b82525050565b61165a81611db2565b82525050565b61167161166c82611db2565b611ee8565b82525050565b600061168282611cdf565b61168c8185611cf5565b935061169c818560208601611e52565b6116a581611f7f565b840191505092915050565b60006116bb82611cdf565b6116c58185611d06565b93506116d5818560208601611e52565b80840191505092915050565b6116ea81611e1f565b82525050565b60006116fb82611cea565b6117058185611d11565b9350611715818560208601611e52565b61171e81611f7f565b840191505092915050565b600061173482611cea565b61173e8185611d22565b935061174e818560208601611e52565b61175781611f7f565b840191505092915050565b600061176d82611cea565b6117778185611d33565b9350611787818560208601611e52565b80840191505092915050565b60006117a0601c83611d33565b91506117ab82611f90565b601c82019050919050565b60006117c3601c83611d22565b91506117ce82611fb9565b602082019050919050565b60006117e6602683611d22565b91506117f182611fe2565b604082019050919050565b6000611809601183611d22565b915061181482612031565b602082019050919050565b600061182c602683611d22565b91506118378261205a565b604082019050919050565b600061184f602083611d22565b915061185a826120a9565b602082019050919050565b6000611872601d83611d22565b915061187d826120d2565b602082019050919050565b6000611895602a83611d22565b91506118a0826120fb565b604082019050919050565b60006118b8601f83611d22565b91506118c38261214a565b602082019050919050565b600060a0830160008301516118e66000860182611624565b5060208301516118f96020860182611952565b506040830151848203604086015261191182826116f0565b9150506060830151848203606086015261192b82826116f0565b9150506080830151848203608086015261194582826116f0565b9150508091505092915050565b61195b81611e08565b82525050565b61196a81611e08565b82525050565b61197981611e12565b82525050565b600061198b82846116b0565b915081905092915050565b60006119a28284611762565b915081905092915050565b60006119b882611793565b91506119c48284611660565b60208201915081905092915050565b60006020820190506119e86000830184611633565b92915050565b6000606082019050611a036000830186611633565b611a106020830185611633565b611a1d6040830184611961565b949350505050565b6000604082019050611a3a6000830185611633565b611a476020830184611961565b9392505050565b6000602082019050611a636000830184611642565b92915050565b6000604082019050611a7e6000830185611651565b8181036020830152611a908184611677565b90509392505050565b6000608082019050611aae6000830187611651565b611abb6020830186611970565b611ac86040830185611651565b611ad56060830184611651565b95945050505050565b6000602082019050611af360008301846116e1565b92915050565b60006020820190508181036000830152611b138184611729565b905092915050565b60006020820190508181036000830152611b34816117b6565b9050919050565b60006020820190508181036000830152611b54816117d9565b9050919050565b60006020820190508181036000830152611b74816117fc565b9050919050565b60006020820190508181036000830152611b948161181f565b9050919050565b60006020820190508181036000830152611bb481611842565b9050919050565b60006020820190508181036000830152611bd481611865565b9050919050565b60006020820190508181036000830152611bf481611888565b9050919050565b60006020820190508181036000830152611c14816118ab565b9050919050565b60006020820190508181036000830152611c3581846118ce565b905092915050565b6000602082019050611c526000830184611961565b92915050565b6000611c62611c73565b9050611c6e8282611eb7565b919050565b6000604051905090565b600067ffffffffffffffff821115611c9857611c97611f50565b5b611ca182611f7f565b9050602081019050919050565b600067ffffffffffffffff821115611cc957611cc8611f50565b5b611cd282611f7f565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000611d4982611e08565b9150611d5483611e08565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d8957611d88611ef2565b5b828201905092915050565b6000611d9f82611de8565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611e2a82611e31565b9050919050565b6000611e3c82611de8565b9050919050565b82818337600083830152505050565b60005b83811015611e70578082015181840152602081019050611e55565b83811115611e7f576000848401525b50505050565b60006002820490506001821680611e9d57607f821691505b60208210811415611eb157611eb0611f21565b5b50919050565b611ec082611f7f565b810181811067ffffffffffffffff82111715611edf57611ede611f50565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f4275726e2074786e20686173682c20616c726561647920657869737400000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61217c81611d94565b811461218757600080fd5b50565b61219381611da6565b811461219e57600080fd5b50565b6121aa81611dbc565b81146121b557600080fd5b50565b6121c181611e08565b81146121cc57600080fd5b5056fea26469706673582212206d63bc1e13793d8d75b4078a347cf50ae18574a9c2510bd08043fcf55e5ce07864736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 221,
        "contract": "contracts/bridge/BSCLock.sol:BSCLock",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/bridge/BSCLock.sol:BSCLock",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2410,
        "contract": "contracts/bridge/BSCLock.sol:BSCLock",
        "label": "approvedSigner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2412,
        "contract": "contracts/bridge/BSCLock.sol:BSCLock",
        "label": "domain",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2414,
        "contract": "contracts/bridge/BSCLock.sol:BSCLock",
        "label": "version",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2210,
        "contract": "contracts/bridge/BSCLock.sol:BSCLock",
        "label": "burnTxnHashes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}